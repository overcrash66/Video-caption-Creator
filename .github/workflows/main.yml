name: Build, Package, and Release Python App

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name (e.g., v1.0.0)'
        required: true
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: windows-latest

    permissions:
      contents: write  # Needed for creating releases

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
    
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: C:\Users\runneradmin\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
          python -m ensurepip
          pip install pillow pydub TTS ffmpeg-python
          pip install torch==2.5.0 torchaudio==2.5.0 torchvision==0.20.0
          pip install librosa trainer
          pip install "inflect<6.0" "pydantic<2.0"
          pip install pyinstaller-hooks-contrib
      
      - name: Verify inflect Installation
        run: |
          python -c "import inflect; print('Inflect path:', inflect.__file__)"
          dir "$(python -c 'import inflect, os; print(os.path.dirname(inflect.__file__))')"
          
      - name: Create Runtime Hook File
        shell: pwsh
        run: |
          Set-Content -Path "disable_torch_jit.py" -Value @"
          import torch
          torch._C._jit_set_profiling_executor(False)
          torch._C._jit_set_profiling_mode(False)
          "@
      
      - name: Debug Tkinter Installation
        run: python -c "import tkinter; print('Tkinter is installed')"

      - name: Verify TTS Installation
        run: |
          python -c "import TTS; print('TTS Path:', TTS.__path__)"
          python -c "from TTS.api import TTS; print('TTS API loaded successfully')"

      - name: Verify torch Installation
        run: |
          python -c "import torch; print('torch Path:', torch.__path__)"
      
      - name: Build binary with PyInstaller
        shell: pwsh
        run: |
          pyinstaller --noconfirm --onedir `
            --additional-hooks-dir=. `
            --name Video-Caption-Creator `
            --add-data "utils;utils" `
            --add-data "processors;processors" `
            --add-data "gui.py;." `
            --add-data "$(python -c 'import TTS, os; print(os.path.dirname(TTS.__file__))');TTS" `
            --add-data "$(python -c 'import trainer, os; print(os.path.dirname(trainer.__file__))');trainer" `
            --add-data "$(python -c 'import torch, os; print(os.path.dirname(torch.__file__))');torch" `
            --add-data "$(python -c 'import inflect, os; print(os.path.dirname(inflect.__file__))');inflect" `
            --add-data "$(python -c 'import typeguard, os; print(os.path.dirname(typeguard.__file__))');typeguard" `
            --add-binary "$(python -c 'import torch; torch_path=os.path.dirname(torch.__file__); print(os.path.join(torch_path, \"lib\", \"*.dll\"))');torch/lib" `
            --hidden-import @("tkinter","_tkinter","ttk","filedialog","messagebox","colorchooser",
              "PIL.Image","PIL.ImageDraw","PIL.ImageFont","PIL.ImageColor","PIL.ImageOps","PIL.ImageTk",
              "pydub","ffmpeg","concurrent.futures","librosa","sklearn.utils._weight_vector",
              "sklearn.neighbors._typedefs","sklearn.neighbors._quad_tree","TTS.api","TTS.tts.configs.vits_config",
              "engineio.async_drivers.threading","typeguard._decorators","inflect.engine") `
            --exclude-module @("torch.testing","TTS.tests","numpy.tests") `
            --runtime-hook disable_torch_jit.py `
            main.py
      
      - name: Install 7-Zip
        run: choco install 7zip -y
      
      - name: Create release directory
        run: mkdir release

      - name: Clean build artifacts
        shell: pwsh
        run: |
          $buildPath = "dist/Video-Caption-Creator"
          
          if (Test-Path $buildPath) {
              # Remove Python cache files safely
              $cacheItems = Get-ChildItem -Path $buildPath -Include __pycache__, *.pyc, *.pyo -Recurse -ErrorAction SilentlyContinue
              if ($cacheItems) {
                  Write-Host "Cleaning up $($cacheItems.Count) cache files"
                  $cacheItems | Remove-Item -Recurse -Force -ErrorAction Continue
              }
              else {
                  Write-Host "No cache files found to clean"
              }
      
              # Remove PDB files if present
              $pdbFiles = Get-ChildItem -Path $buildPath -Filter *.pdb -Recurse -ErrorAction SilentlyContinue
              if ($pdbFiles) {
                  Write-Host "Removing $($pdbFiles.Count) debug symbols"
                  $pdbFiles | Remove-Item -Force -ErrorAction Continue
              }
          }
          else {
              Write-Error "Build directory missing: $buildPath"
              Exit 1
          }
          
          Write-Host "Cleanup completed successfully"

      - name: List build contents
        run: |
          Get-ChildItem -Path dist/Video-Caption-Creator -Recurse |
          Format-Table FullName, Length |
          Out-String -Width 200 |
          Write-Host
      
      - name: Check PyInstaller logs
        run: |
          Get-Content build/Video-Caption-Creator/warn-Video-Caption-Creator.txt |
          Select-String -Pattern "missing" -Context 3

      - name: Compress with maximum optimization
        run: |
          7z a -t7z -mx=9 -m0=lzma2 -mmt=on -mfb=64 -md=32m -ms=on release/Video-Caption-Creator.7z dist/Video-Caption-Creator
      
      - name: Determine tag name
        id: tag_name
        shell: pwsh
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $env:GITHUB_OUTPUT
          } else {
            echo "TAG_NAME=${{ github.ref_name }}" >> $env:GITHUB_OUTPUT
          }

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        if: success()
        with:
          tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
          name: Release ${{ steps.tag_name.outputs.TAG_NAME }}
          files: |
            release/Video-Caption-Creator.zip
