name: Build, Package, and Release Python App

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag name (e.g., v1.0.0)'
        required: true
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: windows-latest

    permissions:
      contents: write  # Needed for creating releases

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
    
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: C:\Users\runneradmin\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
          python -m ensurepip
          pip install pillow pydub TTS ffmpeg-python
          pip install torch==2.5.0 torchaudio==2.5.0 torchvision==0.20.0
          pip install librosa trainer
          pip install "inflect<6.0" "pydantic<2.0"
          pip install pyinstaller-hooks-contrib
      
      - name: Verify inflect Installation
        run: |
          python -c "import inflect; print('Inflect path:', inflect.__file__)"
          dir "$(python -c 'import inflect, os; print(os.path.dirname(inflect.__file__))')"
          
      - name: Create Runtime Hook File
        shell: pwsh
        run: |
          Set-Content -Path "disable_torch_jit.py" -Value @"
          import torch
          torch._C._jit_set_profiling_executor(False)
          torch._C._jit_set_profiling_mode(False)
          "@
      
      - name: Debug Tkinter Installation
        run: python -c "import tkinter; print('Tkinter is installed')"

      - name: Verify TTS Installation
        run: |
          python -c "import TTS; print('TTS Path:', TTS.__path__)"
          python -c "from TTS.api import TTS; print('TTS API loaded successfully')"

      - name: Verify torch Installation
        run: |
          python -c "import torch; print('torch Path:', torch.__path__)"
      
      - name: Build binary with PyInstaller (non-single file)
        run: |
          $TTS_VERSION_PATH = python -c "import TTS, os; print(os.path.dirname(TTS.__file__))"
          $TRAINER_VERSION_PATH = python -c "import trainer, os; print(os.path.dirname(trainer.__file__))"
          $torchPath = python -c "import torch, os; print(os.path.dirname(torch.__file__))"
          Write-Host "Torch path: $torchPath"
          pyinstaller --additional-hooks-dir=. --name Video-Caption-Creator `
          --add-data "utils;utils" `
          --add-data "processors;processors" `
          --add-data "gui.py;." `
          --add-data "$TTS_VERSION_PATH;TTS" `
          --add-data "$TRAINER_VERSION_PATH;trainer" `
          --add-data "$torchPath;torch" `
          --add-data "$(python -c 'import inflect, os; print(os.path.dirname(inflect.__file__))');inflect" `
          --add-data "$(python -c 'import typeguard, os; print(os.path.dirname(typeguard.__file__))');typeguard" `
          --add-binary "$torchPath\lib\*.dll;torch\lib" `
          --hidden-import=tkinter `
          --collect-submodules TTS `
          --collect-all torch `
          --collect-submodules inflect `
          --collect-submodules typeguard `
          --hidden-import=_tkinter `
          --hidden-import=tkinter.ttk `
          --hidden-import=tkinter.filedialog `
          --hidden-import=tkinter.messagebox `
          --hidden-import=tkinter.colorchooser `
          --hidden-import=PIL.Image `
          --hidden-import=PIL.ImageDraw `
          --hidden-import=PIL.ImageFont `
          --hidden-import=PIL.ImageColor `
          --hidden-import=PIL.ImageOps `
          --hidden-import=PIL.ImageTk `
          --hidden-import=pydub `
          --hidden-import=TTS `
          --hidden-import=ffmpeg `
          --hidden-import=concurrent.futures `
          --hidden-import=json `
          --hidden-import=os `
          --hidden-import=logging `
          --hidden-import=subprocess `
          --hidden-import=torch `
          --hidden-import=torch.nn `
          --hidden-import=torchvision `
          --hidden-import=torchaudio `
          --hidden-import=torch.utils `
          --hidden-import=torch.jit `
          --hidden-import=librosa `
          --hidden-import=inflect,typeguard,_typeshed `
          --hidden-import=typeguard._decorators,typeguard._importhook `
          --hidden-import=inflect.engine,typeguard._importhook `
          --hidden-import=TTS `
          --hidden-import=TTS.api `
          --hidden-import=TTS.tts.configs `
          --hidden-import=engineio.async_drivers.threading `
          --hidden-import=TTS.utils.audio.numpy_transforms `
          --hidden-import=TTS.tts.models.vits `
          --hidden-import=TTS.vocoder.models.hifigan_generator `
          --hidden-import=TTS.config.shared_configs `
          --hidden-import=TTS.tts.utils.helpers `
          --hidden-import=sklearn.utils._weight_vector `
          --hidden-import=sklearn.neighbors._typedefs `
          --hidden-import=sklearn.neighbors._quad_tree `
          --runtime-hook disable_torch_jit.py `
          main.py
        shell: pwsh
      
      - name: Install 7-Zip
        run: choco install 7zip -y
      
      - name: Create release directory
        run: mkdir release

      - name: Clean build artifacts
        shell: pwsh
        run: |
          $buildPath = "dist/Video-Caption-Creator"
          
          # Remove debug symbols (if present)
          if (Test-Path "$buildPath/*.pdb") {
            Remove-Item -Path "$buildPath/*.pdb" -Force
          }
      
          # Clean Torch binaries more safely
          $torchLibPath = "$buildPath/torch/lib"
          if (Test-Path $torchLibPath) {
            # Remove static libraries but keep DLLs
            Remove-Item -Path "$torchLibPath/*.a" -Force -ErrorAction SilentlyContinue
            Remove-Item -Path "$torchLibPath/*.lib" -Force -ErrorAction SilentlyContinue
            
            # Remove unnecessary CUDA files if present
            $cudaPaths = @("$torchLibPath/bin", "$torchLibPath/include", "$torchLibPath/share")
            $cudaPaths | ForEach-Object {
              if (Test-Path $_) {
                Remove-Item -Path $_ -Recurse -Force -ErrorAction SilentlyContinue
              }
            }
          }
      
          # Clean Python cached files
          Get-ChildItem -Path $buildPath -Recurse -Include __pycache__, *.pyc, *.pyo |
            Remove-Item -Recurse -Force -ErrorAction SilentlyContinue
      
          # Optional: Remove locale data if not needed
          $localePath = "$buildPath/torch/lib/locale"
          if (Test-Path $localePath) {
            Get-ChildItem $localePath -Exclude en_US | Remove-Item -Recurse -Force
          }

      - name: Verify build integrity
        run: |
          python -c "import sys, os; sys.exit(0 if (len(os.listdir('dist/Video-Caption-Creator')) > 50) else 1)"  
      
      - name: Package application into ZIP
        run: |
          7z a -tzip release/Video-Caption-Creator.zip .\dist\Video-Caption-Creator\

      - name: Determine tag name
        id: tag_name
        shell: pwsh
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            echo "TAG_NAME=${{ github.event.inputs.tag_name }}" >> $env:GITHUB_OUTPUT
          } else {
            echo "TAG_NAME=${{ github.ref_name }}" >> $env:GITHUB_OUTPUT
          }

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        if: success()
        with:
          tag_name: ${{ steps.tag_name.outputs.TAG_NAME }}
          name: Release ${{ steps.tag_name.outputs.TAG_NAME }}
          files: |
            release/Video-Caption-Creator.zip
